<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="generate" noun="TestTransferOrdersWhToStore" transaction="ignore">
        <description>
            Service to generate Test Transfer Orders for Warehouse to Store type transfers.
        </description>
        <in-parameters>
            <parameter name="productStoreId" default-value="STORE"/>
            <parameter name="shipmentMethodTypeId" default-value="STANDARD"/>
            <parameter name="carrierPartyId" default-value="_NA_"/>
            <parameter name="sourceFacilityIdList" type="List" default-value="CENTRAL_WAREHOUSE"/>
            <parameter name="destinationFacilityIdList" type="List" default-value="BROADWAY,WEST_JORDAN"/>
            <parameter name="orderCount" type="Integer" default-value="3"/>
            <parameter name="maxItems" type="Integer" default-value="10"/>
            <parameter name="maxQuantity" type="Integer" default-value="20"/>
            <parameter name="maxDaysPast" type="Integer" default-value="30"/>
            <parameter name="thruDate" type="Date" default="ec.l10n.format(ec.user.nowTimestamp, 'yyyy-MM-dd')"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderIds" type="List"/>
        </out-parameters>
        <actions>
            <set field="orderIds" from="[]"/>
            
            <set field="sourceFacilityIdListSize" from="sourceFacilityIdList.size()"/>
            <set field="destinationFacilityIdListSize" from="destinationFacilityIdList.size()"/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>

            <!-- products to select from for order item -->
            <entity-find entity-name="co.hotwax.facility.ProductFacilityView" list="productFacilityList" limit="maxItems">
                <econdition field-name="facilityId" operator="in" from="sourceFacilityIdList"/>
                <!-- so that MARKETING_PKG_PICK products are not included - no kit products scenario for TOs -->
                <econdition field-name="productTypeId" value="FINISHED_GOOD"/>
                <!-- this will also not fetch _NA_ productId -->
                <having-econditions>
                    <econdition field-name="totalComputedLastInventoryCount" operator="greater" value="0"/>
                </having-econditions>
                <select-field field-name="productId"/>
                <order-by field-name="-lastUpdatedStamp"/>
            </entity-find>
            <if condition="!productFacilityList"><return message="No products found to order for facility ${sourceFacilityIdList})"/></if>
            <set field="productIdList" from="productFacilityList*.productId"/>
            <set field="productIdListCount" from="productIdList.size()"/>

            <!-- check to have order items equal to eligible products found -->
            <if condition="productIdListCount &lt; maxItems">
                <set field="maxItems" from="productIdListCount"/>
            </if>

            <!-- create transfer orders -->
            <script><![CDATA[
                Random rand = new Random()
                boolean suspendedTransaction = false
                try {
                    if (ec.transaction.isTransactionInPlace()) suspendedTransaction = ec.transaction.suspend()

                    for (int idx = 0; idx < orderCount; idx++) {
                        // run each in separate TX, then clear errors and other messages
                        boolean beganTransaction = ec.transaction.begin(timeout)
                        try {
                            java.sql.Date orderDate = thruDate - rand.nextInt(maxDaysPast)
                            Timestamp orderTs = ec.l10n.parseTimestamp(orderDate.toString() + " " + (rand.nextInt(12) + 8).toString().padLeft(2, '0') + ":00:00.000", null)

                            def timestamp = System.currentTimeMillis()
                            def randomSuffix = (1000 + rand.nextInt(9000)) // random 4-digit number
                            externalId = "TEST_TO_WTS_${timestamp}_${randomSuffix}"
                            sourceFacilityId = sourceFacilityIdList.get(rand.nextInt(sourceFacilityIdListSize))
                            Map orderMap = [externalId:externalId, orderName:externalId, productStoreId:productStoreId, statusId:'ORDER_CREATED',
                                orderTypeId:'TRANSFER_ORDER', orderDate:orderTs, entryDate:orderTs, statusFlowId:'TO_Receive_Only',
                                originFacilityId:sourceFacilityId]
                            Map shipGroupMap = [shipmentMethodTypeId:shipmentMethodTypeId, carrierPartyId:carrierPartyId,
                                    facilityId:sourceFacilityId, orderFacilityId:destinationFacilityIdList.get(rand.nextInt(destinationFacilityIdListSize))]
                            items = []
                            int itemCount = rand.nextInt(maxItems) + 1
                            ec.logger.info("itemCount for order ${idx}: ${itemCount}")
                            for (int itemIdx = 0; itemIdx < itemCount; itemIdx++) {
                                String productId = productIdList.get(itemIdx)
                                int itemQuantity = rand.nextInt(maxQuantity) + 1
                                itemMap = [externalId:itemIdx + 1, orderItemTypeId:'PRODUCT_ORDER_ITEM', quantity:itemQuantity,
                                    statusId:'ITEM_CREATED', productId:productId]
                                items.add(itemMap)
                            }
                            shipGroupMap.items = items
                            shipGroupList = []
                            shipGroupList.add(shipGroupMap)
                            orderMap.shipGroups = shipGroupList
                            Map orderOut = ec.service.sync().name("co.hotwax.orderledger.order.TransferOrderServices.create#TransferOrder").parameters([payload:orderMap]).call()
                            String orderId = orderOut.orderId
                            orderIds.add(orderId)
                            ec.logger.warn("Creating transfer order ${orderId} date ${orderTs}")
                        } catch (Throwable t) {
                            ec.transaction.rollback(beganTransaction, "Error generating order", t)
                            ec.logger.log(200, "Generate transfer order error", t)
                        } finally {
                            if (ec.transaction.isTransactionInPlace()) ec.transaction.commit(beganTransaction)
                        }
                        ec.message.clearAll()
                    }
                } catch (Exception e) {
                    ec.logger.log(200, "Generate transfer order TX error", e)
                } finally {
                    if (suspendedTransaction) ec.transaction.resume()
                }
            ]]></script>
        </actions>
    </service>

    <service verb="generate" noun="TestTransferOrdersStoreToWh" transaction="ignore">
        <description>
            Service to generate Test Transfer Orders for Store to Warehouse type transfers.
        </description>
        <in-parameters>
            <parameter name="productStoreId" default-value="STORE"/>
            <parameter name="shipmentMethodTypeId" default-value="STANDARD"/>
            <parameter name="carrierPartyId" default-value="_NA_"/>
            <parameter name="sourceFacilityIdList" type="List" default-value="BROADWAY,WEST_JORDAN"/>
            <parameter name="destinationFacilityIdList" type="List" default-value="CENTRAL_WAREHOUSE"/>
            <parameter name="orderCount" type="Integer" default-value="3"/>
            <parameter name="maxItems" type="Integer" default-value="10"/>
            <parameter name="maxQuantity" type="Integer" default-value="20"/>
            <parameter name="maxDaysPast" type="Integer" default-value="30"/>
            <parameter name="thruDate" type="Date" default="ec.l10n.format(ec.user.nowTimestamp, 'yyyy-MM-dd')"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderIds" type="List"/>
        </out-parameters>
        <actions>
            <set field="orderIds" from="[]"/>

            <set field="sourceFacilityIdListSize" from="sourceFacilityIdList.size()"/>
            <set field="destinationFacilityIdListSize" from="destinationFacilityIdList.size()"/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>

            <!-- products to select from for order item -->
            <entity-find entity-name="co.hotwax.facility.ProductFacilityView" list="productFacilityList" limit="maxItems">
                <econdition field-name="facilityId" operator="in" from="sourceFacilityIdList"/>
                <!-- so that MARKETING_PKG_PICK products are not included - no kit products scenario for TOs -->
                <econdition field-name="productTypeId" value="FINISHED_GOOD"/>
                <!-- this will also not fetch _NA_ productId -->
                <having-econditions>
                    <econdition field-name="totalComputedLastInventoryCount" operator="greater" value="0"/>
                </having-econditions>
                <select-field field-name="productId"/>
                <order-by field-name="-lastUpdatedStamp"/>
            </entity-find>
            <if condition="!productFacilityList"><return message="No products found to order for facility ${sourceFacilityIdList})"/></if>
            <set field="productIdList" from="productFacilityList*.productId"/>
            <set field="productIdListCount" from="productIdList.size()"/>

            <!-- check to have order items equal to eligible products found -->
            <if condition="productIdListCount &lt; maxItems">
                <set field="maxItems" from="productIdListCount"/>
            </if>

            <!-- create transfer orders -->
            <script><![CDATA[
                Random rand = new Random()
                boolean suspendedTransaction = false
                try {
                    if (ec.transaction.isTransactionInPlace()) suspendedTransaction = ec.transaction.suspend()

                    for (int idx = 0; idx < orderCount; idx++) {
                        // run each in separate TX, then clear errors and other messages
                        boolean beganTransaction = ec.transaction.begin(timeout)
                        try {
                            java.sql.Date orderDate = thruDate - rand.nextInt(maxDaysPast)
                            Timestamp orderTs = ec.l10n.parseTimestamp(orderDate.toString() + " " + (rand.nextInt(12) + 8).toString().padLeft(2, '0') + ":00:00.000", null)

                            def timestamp = System.currentTimeMillis()
                            def randomSuffix = (1000 + rand.nextInt(9000)) // random 4-digit number
                            externalId = "TEST_TO_STW_${timestamp}_${randomSuffix}"
                            sourceFacilityId = sourceFacilityIdList.get(rand.nextInt(sourceFacilityIdListSize))
                            Map orderMap = [externalId:externalId, orderName:externalId, productStoreId:productStoreId, statusId:'ORDER_CREATED',
                                orderTypeId:'TRANSFER_ORDER', orderDate:orderTs, entryDate:orderTs, statusFlowId:'TO_Fulfill_Only',
                                originFacilityId:sourceFacilityId]
                            Map shipGroupMap = [shipmentMethodTypeId:shipmentMethodTypeId, carrierPartyId:carrierPartyId,
                                    facilityId:sourceFacilityId, orderFacilityId:destinationFacilityIdList.get(rand.nextInt(destinationFacilityIdListSize))]
                            items = []
                            int itemCount = rand.nextInt(maxItems) + 1
                            ec.logger.info("itemCount for order ${idx}: ${itemCount}")
                            for (int itemIdx = 0; itemIdx < itemCount; itemIdx++) {
                                String productId = productIdList.get(itemIdx)
                                int itemQuantity = rand.nextInt(maxQuantity) + 1
                                itemMap = [externalId:itemIdx + 1, orderItemTypeId:'PRODUCT_ORDER_ITEM', quantity:itemQuantity,
                                    statusId:'ITEM_CREATED', productId:productId]
                                items.add(itemMap)
                            }
                            shipGroupMap.items = items
                            shipGroupList = []
                            shipGroupList.add(shipGroupMap)
                            orderMap.shipGroups = shipGroupList
                            Map orderOut = ec.service.sync().name("co.hotwax.orderledger.order.TransferOrderServices.create#TransferOrder").parameters([payload:orderMap]).call()
                            String orderId = orderOut.orderId
                            orderIds.add(orderId)
                            ec.logger.warn("Creating transfer order ${orderId} date ${orderTs}")
                        } catch (Throwable t) {
                            ec.transaction.rollback(beganTransaction, "Error generating order", t)
                            ec.logger.log(200, "Generate transfer order error", t)
                        } finally {
                            if (ec.transaction.isTransactionInPlace()) ec.transaction.commit(beganTransaction)
                        }
                        ec.message.clearAll()
                    }
                } catch (Exception e) {
                    ec.logger.log(200, "Generate transfer order TX error", e)
                } finally {
                    if (suspendedTransaction) ec.transaction.resume()
                }
            ]]></script>
        </actions>
    </service>

    <service verb="generate" noun="TestTransferOrdersStoreToStore" transaction="ignore">
        <description>
            Service to generate Test Transfer Orders for Store to Store type transfers.
        </description>
        <in-parameters>
            <parameter name="productStoreId" default-value="STORE"/>
            <parameter name="shipmentMethodTypeId" default-value="STANDARD"/>
            <parameter name="carrierPartyId" default-value="_NA_"/>
            <parameter name="sourceFacilityIdList" type="List" default-value="BROADWAY"/>
            <parameter name="destinationFacilityIdList" type="List" default-value="BROOKLYN"/>
            <parameter name="orderCount" type="Integer" default-value="3"/>
            <parameter name="maxItems" type="Integer" default-value="10"/>
            <parameter name="maxQuantity" type="Integer" default-value="20"/>
            <parameter name="maxDaysPast" type="Integer" default-value="30"/>
            <parameter name="thruDate" type="Date" default="ec.l10n.format(ec.user.nowTimestamp, 'yyyy-MM-dd')"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderIds" type="List"/>
        </out-parameters>
        <actions>
            <set field="orderIds" from="[]"/>

            <set field="sourceFacilityIdListSize" from="sourceFacilityIdList.size()"/>
            <set field="destinationFacilityIdListSize" from="destinationFacilityIdList.size()"/>

            <set field="entryDate" from="ec.user.nowTimestamp"/>

            <!-- products to select from for order item -->
            <entity-find entity-name="co.hotwax.facility.ProductFacilityView" list="productFacilityList" limit="maxItems">
                <econdition field-name="facilityId" operator="in" from="sourceFacilityIdList"/>
                <!-- so that MARKETING_PKG_PICK products are not included - no kit products scenario for TOs -->
                <econdition field-name="productTypeId" value="FINISHED_GOOD"/>
                <!-- this will also not fetch _NA_ productId -->
                <having-econditions>
                    <econdition field-name="totalComputedLastInventoryCount" operator="greater" value="0"/>
                </having-econditions>
                <select-field field-name="productId"/>
                <order-by field-name="-lastUpdatedStamp"/>
            </entity-find>
            <if condition="!productFacilityList"><return message="No products found to order for facility ${sourceFacilityIdList})"/></if>
            <set field="productIdList" from="productFacilityList*.productId"/>
            <set field="productIdListCount" from="productIdList.size()"/>

            <!-- check to have order items equal to eligible products found -->
            <if condition="productIdListCount &lt; maxItems">
                <set field="maxItems" from="productIdListCount"/>
            </if>

            <!-- create transfer orders -->
            <script><![CDATA[
                Random rand = new Random()
                boolean suspendedTransaction = false
                try {
                    if (ec.transaction.isTransactionInPlace()) suspendedTransaction = ec.transaction.suspend()

                    for (int idx = 0; idx < orderCount; idx++) {
                        // run each in separate TX, then clear errors and other messages
                        boolean beganTransaction = ec.transaction.begin(timeout)
                        try {
                            java.sql.Date orderDate = thruDate - rand.nextInt(maxDaysPast)
                            Timestamp orderTs = ec.l10n.parseTimestamp(orderDate.toString() + " " + (rand.nextInt(12) + 8).toString().padLeft(2, '0') + ":00:00.000", null)

                            def timestamp = System.currentTimeMillis()
                            def randomSuffix = (1000 + rand.nextInt(9000)) // random 4-digit number
                            externalId = "TEST_TO_STS_${timestamp}_${randomSuffix}"
                            sourceFacilityId = sourceFacilityIdList.get(rand.nextInt(sourceFacilityIdListSize))
                            Map orderMap = [externalId:externalId, orderName:externalId, productStoreId:productStoreId, statusId:'ORDER_CREATED',
                                orderTypeId:'TRANSFER_ORDER', orderDate:orderTs, entryDate:orderTs, statusFlowId:'TO_Fulfill_And_Receive',
                                originFacilityId:sourceFacilityId]
                            Map shipGroupMap = [shipmentMethodTypeId:shipmentMethodTypeId, carrierPartyId:carrierPartyId,
                                    facilityId:sourceFacilityId, orderFacilityId:destinationFacilityIdList.get(rand.nextInt(destinationFacilityIdListSize))]
                            items = []
                            int itemCount = rand.nextInt(maxItems) + 1
                            ec.logger.info("itemCount for order ${idx}: ${itemCount}")
                            for (int itemIdx = 0; itemIdx < itemCount; itemIdx++) {
                                String productId = productIdList.get(itemIdx)
                                int itemQuantity = rand.nextInt(maxQuantity) + 1
                                itemMap = [externalId:itemIdx + 1, orderItemTypeId:'PRODUCT_ORDER_ITEM', quantity:itemQuantity,
                                    statusId:'ITEM_CREATED', productId:productId]
                                items.add(itemMap)
                            }
                            shipGroupMap.items = items
                            shipGroupList = []
                            shipGroupList.add(shipGroupMap)
                            orderMap.shipGroups = shipGroupList
                            Map orderOut = ec.service.sync().name("co.hotwax.orderledger.order.TransferOrderServices.create#TransferOrder").parameters([payload:orderMap]).call()
                            String orderId = orderOut.orderId
                            orderIds.add(orderId)
                            ec.logger.warn("Creating transfer order ${orderId} date ${orderTs}")
                        } catch (Throwable t) {
                            ec.transaction.rollback(beganTransaction, "Error generating order", t)
                            ec.logger.log(200, "Generate transfer order error", t)
                        } finally {
                            if (ec.transaction.isTransactionInPlace()) ec.transaction.commit(beganTransaction)
                        }
                        ec.message.clearAll()
                    }
                } catch (Exception e) {
                    ec.logger.log(200, "Generate transfer order TX error", e)
                } finally {
                    if (suspendedTransaction) ec.transaction.resume()
                }
            ]]></script>
        </actions>
    </service>

    <service verb="test" noun="BulkApproveWhFulfillTransferOrders" authenticate="anonymous-all">
        <description>
            Test service to verify Bulk Approve Wh Fulfill TOs.
            Success Criteria for this scenario: APPROVED_ORDER_COUNT_CHECK_SUCCESSFUL, PENDING_RECEIPT_ORDER_ITEM_COUNT_CHECK_SUCCESSFUL
        </description>
        <in-parameters>
            <parameter name="orderIds" type="List" required="true">
                <description>List of order Ids to test the bulk approve of Wh Fulfill Transfer Orders.</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="isPassed" type="Boolean" default-value="false"/>
            <parameter name="passCriteriaList" type="List"/>
            <parameter name="failCriteriaList" type="List"/>
        </out-parameters>
        <actions>
            <set field="passCriteriaList" from="[]"/>
            <set field="failCriteriaList" from="[]"/>

            <!-- Fetch the total item count to verify the item status change -->
            <entity-find-count entity-name="org.apache.ofbiz.order.order.OrderItem" count-field="itemCount">
                <econdition field-name="orderId" operator="in" from="orderIds"/>
            </entity-find-count>

            <!-- Set the total order count to verify the order status change -->
            <set field="orderCount" from="orderIds.size()"/>

            <!-- Actual Action - Run Bulk Approve Service for Wh Fulfill TOs -->
            <service-call name="co.hotwax.orderledger.order.TransferOrderServices.bulkApprove#WhFulfillTransferOrders"
                    in-map="[orderIds:orderIds]"/>

            <!-- Assertions -->
            <!-- 1. Validate Approved Order Count -->
            <entity-find-count entity-name="org.apache.ofbiz.order.order.OrderHeader" count-field="approvedOrderCount">
                <econdition field-name="orderId" operator="in" from="orderIds"/>
                <econdition field-name="statusId" value="ORDER_APPROVED"/>
            </entity-find-count>
            <if condition="approvedOrderCount == orderCount"><then>
                <script>passCriteriaList.add("APPROVED_ORDER_COUNT_CHECK_SUCCESSFUL")</script>
            </then><else>
                <script>failCriteriaList.add("APPROVED_ORDER_COUNT_CHECK_FAILURE")</script>
            </else></if>

            <!-- 2. Validate Pending Receipt Order Item Count -->
            <entity-find-count entity-name="org.apache.ofbiz.order.order.OrderItem" count-field="approvedOrderItemCount">
                <econdition field-name="orderId" operator="in" from="orderIds"/>
                <econdition field-name="statusId" value="ITEM_PENDING_RECEIPT"/>
            </entity-find-count>
            <if condition="approvedOrderItemCount == itemCount"><then>
                <script>passCriteriaList.add("PENDING_RECEIPT_ORDER_ITEM_COUNT_CHECK_SUCCESSFUL")</script>
            </then><else>
                <script>failCriteriaList.add("PENDING_RECEIPT_ORDER_ITEM_CHECK_FAILURE")</script>
            </else>
            </if>
            <!-- Return result -->
            <if condition="failCriteriaList.size() > 0"><then>
                <set field="isPassed" from="false"/>
                <set field="passCriteriaList" from="[]"/>
            </then><else>
                <set field="isPassed" from="true"/>
            </else></if>
        </actions>
    </service>

    <service verb="test" noun="BulkApproveStoreFulfillTransferOrders" authenticate="anonymous-all">
        <description>
            Test service to verify Bulk Approve Store Fulfill TOs.
            Success Criteria for this scenario: APPROVED_ORDER_COUNT_CHECK_SUCCESSFUL,
            PENDING_FULFILL_ORDER_ITEM_COUNT_CHECK_SUCCESSFUL, RESERVED_ORDER_ITEM_COUNT_CHECK_SUCCESSFUL
        </description>
        <in-parameters>
            <parameter name="orderIds" type="List" required="true">
                <description>List of order Ids to test the bulk approve of Store Fulfill Transfer Orders.</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="isPassed" type="Boolean" default-value="false"/>
            <parameter name="passCriteriaList" type="List"/>
            <parameter name="failCriteriaList" type="List"/>
        </out-parameters>
        <actions>
            <set field="passCriteriaList" from="[]"/>
            <set field="failCriteriaList" from="[]"/>

            <!-- Fetch the total item count to verify the item status change -->
            <entity-find-count entity-name="org.apache.ofbiz.order.order.OrderItem" count-field="itemCount">
                <econdition field-name="orderId" operator="in" from="orderIds"/>
            </entity-find-count>

            <!-- Set the total order count to verify the order status change -->
            <set field="orderCount" from="orderIds.size()"/>

            <!-- Actual Action - Run Bulk Approve Service for Store Fulfill TOs -->
            <service-call name="co.hotwax.orderledger.order.TransferOrderServices.bulkApprove#StoreFulfillTransferOrders"
                    in-map="[orderIds:orderIds]"/>

            <!-- Assertions -->
            <!-- 1. Validate Approved Order Count -->
            <entity-find-count entity-name="org.apache.ofbiz.order.order.OrderHeader" count-field="approvedOrderCount">
                <econdition field-name="orderId" operator="in" from="orderIds"/>
                <econdition field-name="statusId" value="ORDER_APPROVED"/>
            </entity-find-count>
            <if condition="approvedOrderCount == orderCount"><then>
                <script>passCriteriaList.add("APPROVED_ORDER_COUNT_CHECK_SUCCESSFUL")</script>
            </then><else>
                <script>failCriteriaList.add("APPROVED_ORDER_COUNT_CHECK_FAILURE")</script>
            </else></if>

            <!-- 2. Validate Pending Fulfill Order Item Count -->
            <entity-find-count entity-name="org.apache.ofbiz.order.order.OrderItem" count-field="approvedOrderItemCount">
                <econdition field-name="orderId" operator="in" from="orderIds"/>
                <econdition field-name="statusId" value="ITEM_PENDING_FULFILL"/>
            </entity-find-count>
            <if condition="approvedOrderItemCount == itemCount"><then>
                <script>passCriteriaList.add("PENDING_FULFILL_ORDER_ITEM_COUNT_CHECK_SUCCESSFUL")</script>
            </then><else>
                <script>failCriteriaList.add("PENDING_FULFILL_ORDER_ITEM_COUNT_CHECK_FAILURE")</script>
            </else>
            </if>

            <!-- 2. Validate OISGIR Count with quantity field -->
            <entity-find-count entity-name="org.apache.ofbiz.order.order.OrderItemShipGrpInvRes" count-field="reservedItemCount">
                <econdition field-name="orderId" operator="in" from="orderIds"/>
                <econdition field-name="quantity" operator="is-not-null"/>
            </entity-find-count>
            <if condition="reservedItemCount == itemCount"><then>
                <script>passCriteriaList.add("RESERVED_ORDER_ITEM_COUNT_CHECK_SUCCESSFUL")</script>
            </then><else>
                <script>failCriteriaList.add("RESERVED_ORDER_ITEM_COUNT_CHECK_FAILURE")</script>
            </else>
            </if>

            <!-- Return result -->
            <if condition="failCriteriaList.size() > 0"><then>
                <set field="isPassed" from="false"/>
                <set field="passCriteriaList" from="[]"/>
            </then><else>
                <set field="isPassed" from="true"/>
            </else></if>
        </actions>
    </service>
</services>
